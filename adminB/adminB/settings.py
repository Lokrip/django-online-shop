"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# # Этот параметр указывает, какие источники (домен/порт) 
# # имеют право отправлять запросы к вашему серверу. 
# # В данном случае только запросы с http://127.0.0.1:5500 будут разрешены
# CORS_ALLOWED_ORIGINS = [ 
#     'http://127.0.0.1:5500',
#     'http://localhost:3000',
# ]

# # Эта настройка разрешает запросы от любых источников. Если вы установите это значение на True, 
# # ваш сервер будет принимать запросы с любого домена и порта, без каких-либо ограничений.
# CORS_ALLOW_ALL_ORIGINS = True

# # Эта настройка позволяет вашему серверу принимать запросы, которые 
# # содержат учетные данные (например, куки, заголовки авторизации или сертификаты клиента). 
# # Это полезно, если ваш API требует аутентификации и 
# # вы хотите использовать куки или другие способы хранения данных о сессии
# CORS_ALLOW_CREDENTIALS = True

STRIPE_PUBLISHABLE_KEY = 'pk_test_51QEuJNEovEqovTuFOx6UkF2sxViZOJGWBZjN7zMyeIZ1h94QmwvgxINaHCOPc4Zrq74vI6cHZMDt54g7yUAfX52g00GSQKrmGh'
STRIPE_SECRET_KEY = 'sk_test_51QEuJNEovEqovTuFWhwNSnS35OqfY0fMbb7W3Dl5ZBhO6cNQpIg8AY53NTauC1K3WC5adoFQZnn6VL28pONPr56H00kcN5qJv9'
STRIPE_API_VERSION = '2023-10-16'

INTERNAL_IPS = [
    '127.0.0.1',
]

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.timer.TimerPanel',
    # другие панели ...
    # 'debug_toolbar.panels.sql.SQLPanel',  # закомментируйте эту строку
    # другие панели ...
]

# Application definition
INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'django_cleanup.apps.CleanupConfig',
    'cities_light',
    'django_countries',
    'rest_framework',
    'debug_toolbar',
    'mptt',
    
    'models',
    'product',
    'customers',
    'cart',
    'payments',
    'account',
    'admin_home',
    'chat',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'adminB.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'settings.context.context_processors.get_header_settings',
                'admin_home.context_processors.sidebar_admin'
            ],
        },
    },
]

ASGI_APPLICATION = 'adminB.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [("127.0.0.1", 6379)],  # Подключение к Redis
        },
    }
}

WSGI_APPLICATION = 'adminB.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

#Хост редиса
REDIS_HOST = '127.0.0.1' # Адрес, по которому Redis будет доступен. '0.0.0.0' означает, что Redis будет доступен на всех интерфейсах.
#Порт редиса
REDIS_PORT = '6379' # Порт, на котором Redis будет слушать входящие соединения. 6379 - это стандартный порт для Redis.

#брокер URL
CELERY_BROKER_URL = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0'

# Параметры транспорта брокера
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600} # Опции для транспорта брокера, где 'visibility_timeout' указывает время (в секундах), в течение которого задача будет недоступна для повторной обработки после получения.

# URL для хранения результатов
CELERY_RESULT_BACKEND = 'redis://' + REDIS_HOST + ':' + REDIS_PORT + '/0' # URL для хранения результатов выполнения задач, также указывает на Redis и использует ту же базу данных.

# Разрешенные форматы контента
CELERY_ACCEPT_CONTENT = ['application/json'] # Указывает, какие форматы контента Celery может принимать. В данном случае это JSON.

# Сериализатор задач
CELERY_TASK_SERIALIZER = 'json' # Указывает, в каком формате задачи будут сериализованы (преобразованы в строку) перед отправкой в брокер. Здесь используется JSON.

# Сериализатор результатов
CELERY_RESULT_SERIALIZER = 'json'  # Указывает, в каком формате результаты выполнения задач будут сериализованы. В данном случае также используется JSON.



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'models.User'

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    
    'django.contrib.auth.backends.ModelBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en'   # Установите основной язык, например, английский

TIME_ZONE = 'UTC'

USE_I18N = True
USE_L10N = True

USE_TZ = True

# Добавьте доступные языки
LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Russian'),
]

# Укажите путь для файлов перевода
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

#add Static
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# def email_verified_callback(user): #Это делаеть пользователя актвиным после подверждение ответа
#     user.is_active = True

LOGIN_REDIRECT_URL = '/'

LOGIN_URL = '/account/login/'

# Настройки почтового сервера
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Указывает бэкенд, используемый для отправки email, здесь используется SMTP.
EMAIL_HOST = 'smtp.gmail.com'  # SMTP-сервер, который будет использоваться для отправки писем (SMTP-сервер Gmail).
EMAIL_USE_TLS = True  # Указывает, нужно ли использовать TLS (Transport Layer Security) для безопасного соединения.
EMAIL_PORT = 587  # Номер порта для SMTP через TLS (587 — стандартный для TLS).
EMAIL_HOST_USER = 'slavadorohov499@gmail.com'  # Email-адрес, используемый для аутентификации на SMTP-сервере (аккаунт Gmail).
EMAIL_HOST_PASSWORD = 'xzwrtlsyagmmnfir'  # Пароль для email-аккаунта, используемого для аутентификации на SMTP-сервере.
